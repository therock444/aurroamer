#!/usr/bin/env bash
# aurroamer - package browser in bash, because why not
# copyright (c) 2025 therock
# SPDX-License-Identifier: MIT
set -euo pipefail

VERSION="2.0.0-3"
if [[ "${1-}" == "--version" || "${1-}" == "-v" ]]; then
    echo "aurroamer $VERSION"
    exit 0
fi

aurpackages=$(mktemp)
repopackages=$(mktemp)
total=$(mktemp)

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/aurroamer"
hooks_dir="$config_dir/hooks.d"
favorites_file="$config_dir/favorites.txt"
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}"
cachedaur="$cache_dir/aurroamer-cache.txt"

mkdir -p "$hooks_dir"
touch "$favorites_file"

cleanup() {
    rm -f "$aurpackages" "$repopackages" "$total"
}
trap 'cleanup; exit 130' INT
trap 'cleanup' EXIT

download_aur_list() {
    echo "downloading list of all known aur packages"
    if ! curl -Lsk https://aur.archlinux.org/packages.gz | gunzip > "$aurpackages"; then
        echo "failed to fetch aur packages"
        exit 1
    fi
    mkdir -p "$(dirname "$cachedaur")"
    cp "$aurpackages" "$cachedaur"
}

preview_package() {
    local pkgtype="$1"
    local pkgname="$2"
    echo "[previewing $pkgname]"
    if [[ "$pkgtype" == "[official]" ]]; then
        pacman -Si --color=always "$pkgname"
    elif [[ "$pkgtype" == "[aur]" && -n "$aur_helper" ]]; then
        "$aur_helper" -Si "$pkgname"
    fi
}

install_package() {
    local pkgtype="$1"
    local pkgname="$2"
    echo "[installing $pkgname]"
    if [[ "$pkgtype" == "[official]" ]]; then
        sudo pacman -S "$pkgname"
    elif [[ "$pkgtype" == "[aur]" && -n "$aur_helper" ]]; then
        "$aur_helper" -S "$pkgname"
    fi
    run_post_install_hook "$pkgname"
}

generate_fzf_input() {
    case "$1" in
        1)
            fzf_input=$(awk '{printf "[official] %s\n", $0}' "$repopackages")
            ;;
        2)
            fzf_input=$(awk '{printf "[aur]      %s\n", $0}' "$aurpackages")
            ;;
        3)
            fzf_input=$( (awk '{printf "[aur]      %s\n", $0}' "$aurpackages"; awk '{printf "[official] %s\n", $0}' "$repopackages") )
            ;;
        4)
            fzf_input=$(cat "$favorites_file")
            ;;
        search:*)
            search_term="${1#search:}"
            fzf_input=$( (awk '{printf "[aur]      %s\n", $0}' "$aurpackages"; awk '{printf "[official] %s\n", $0}' "$repopackages") | grep -iF "$search_term" )
            ;;
        *)
            fzf_input=""
            ;;
    esac
}

run_post_install_hook() {
    local pkgname="$1"
    local hook="$hooks_dir/post_install_$pkgname"
    if [[ -x "$hook" ]]; then
        echo "post-install hook found for $pkgname"
        echo "WARNING: running arbitrary code from $hook"
        echo "do you want to run this? [y/N]"
        read -rp ">> " run_hook
        if [[ "$run_hook" =~ ^[Yy]$ ]]; then
            "$hook"
        else
            echo "skipping hook"
        fi
    fi
}

require_binary() {
    if ! command -v "$1" > /dev/null; then
        echo "error: required binary '$1' is not installed"
        exit 1
    fi
}

if [[ "${1-}" == "--refresh" || "${1-}" == "-r" ]]; then
    echo "refreshing package list"
    aurpackages=$(mktemp)
    download_aur_list
    echo "cache refreshed"
    exit 0
fi

if [[ "${1-}" == "--help" || "${1-}" == "-h" ]]; then
    cat <<EOF
aurroamer - browse AUR and official packages with fzf

  usage:
    aurroamer                    launch interactive mode
    aurroamer --version / -v     show version
    aurroamer --help / -h        show this message
    aurroamer --clear / -c       clears stored AUR package list cache
    aurroamer --refresh / -r     skips the cache prompt and refreshes the cache
    aurroamer --search <term>    search for packages by name

  hint: to select multiple packages in fzf, use tab
  hint: post-install hooks: ~/.config/aurroamer/hooks.d/post_install_<pkgname>
  hint: favorites are stored in ~/.config/aurroamer/favorites.txt
EOF
    exit 0
fi

if [[ "${1-}" == "--clear" || "${1-}" == "-c" ]]; then
    echo "deleting cached package list"
    if ! rm "$cachedaur" 2>/dev/null; then
        echo "no cache to delete, or other error"
        exit 1
    fi
    exit 0
fi

if ! [ -t 1 ]; then
    echo "error: aurroamer requires an interactive terminal"
    exit 1
fi

detect_aur_helper() {
    for helper in yay paru trizen pikaur; do
        if command -v "$helper" > /dev/null; then
            echo "$helper"
            return
        fi
    done
    echo ""
}

aur_helper=$(detect_aur_helper)

require_binary fzf
require_binary pacman

if [[ -z "$aur_helper" ]]; then
    echo "warning: no supported aur helper found â€” aur packages cannot be interacted with"
    sleep 1
else
    echo "using aur helper: $aur_helper"
fi

if [[ -f "$cachedaur" ]]; then
    echo "cached aur package list found"
    if [ -t 0 ]; then
        echo "use cached list instead of downloading? it may be outdated [Y/n]"
        read -rp ">> " usecache
    else
        usecache="y"
    fi

    if [[ ! "$usecache" =~ ^[Nn]$ ]]; then
        cp "$cachedaur" "$aurpackages"
    else
        download_aur_list
    fi
else
    echo "no cached aur package list found"
    download_aur_list
fi

echo "making a list of known official packages"
if ! pacman -Slq > "$repopackages"; then
    echo "failed to get official packages"
    exit 1
fi

sort -o "$aurpackages" "$aurpackages" > /dev/null
sort -o "$repopackages" "$repopackages" > /dev/null

aur_count=$(wc -l < "$aurpackages")
repo_count=$(wc -l < "$repopackages")
total_count=$((aur_count + repo_count))
echo
echo "official package count: $repo_count"
echo "aur package count: $aur_count"
echo "total package count: $total_count"

echo
if [[ "${1-}" == "--search" || "${1-}" == "-s" ]]; then
    generate_fzf_input "search:$2"
else
    echo "browse which packages?"
    echo "1) official only"
    echo "2) aur only"
    echo "3) all"
    echo "4) favorites"
    read -rp ">> " mode
    generate_fzf_input "$mode"
fi
    case "$mode" in
        1)
            fzf_input=$(awk '{printf "[official] %s\n", $0}' "$repopackages")
            ;;
        2)
            fzf_input=$(awk '{printf "[aur]      %s\n", $0}' "$aurpackages")
            ;;
        3)
            fzf_input=$( (awk '{printf "[aur]      %s\n", $0}' "$aurpackages"; awk '{printf "[official] %s\n", $0}' "$repopackages") )
            ;;
        4)
            fzf_input=$(cat "$favorites_file")
            ;;
        *)
            exit 0
            ;;
    esac

echo
while true; do
    selection=$(echo "$fzf_input" | fzf --prompt="Search >> " --multi)
    [[ -z "$selection" ]] && exit 0

    mapfile -t selected_lines <<< "$selection"

    if (( ${#selected_lines[@]} > 1 )); then
        while true; do
            clear
            echo "you selected multiple packages:"
            echo
            for line in "${selected_lines[@]}"; do
                echo "  - $line"
            done
            echo

            echo "choose an option:"
            echo "1) preview package info (first)"
            echo "2) install individually"
            echo "3) back to package list"
            echo "4) add all to favorites"
            echo "5) remove all from favorites"
            echo "6) bulk install all"
            echo "7) refresh package list"
            read -rp ">> " choice

            case "$choice" in
                1)
                    clear
                    line="${selected_lines[0]}"
                    pkgtype="${line%% *}"
                    pkgname="${line#* }"
                    pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"
                    preview_package "$pkgtype" "$pkgname"
                    read -n 1 -s -r -p "press any key to return"
                    ;;
                2)
                    clear
                    for line in "${selected_lines[@]}"; do
                        pkgtype="${line%% *}"
                        pkgname="${line#* }"
                        pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"
                        install_package "$pkgtype" "$pkgname"
                    done
                    read -n 1 -s -r -p "press any key to return"
                    ;;
                3)
                    clear
                    break
                    ;;
                4)
                    clear
                    for line in "${selected_lines[@]}"; do
                        pkgname="${line#* }"
                        pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"
                        echo "$pkgname" >> "$favorites_file"
                    done
                    sort -u -o "$favorites_file" "$favorites_file"
                    echo "packages added to favorites"
                    read -n 1 -s -r -p "press any key to return"
                    ;;
                5)
                    clear
                    for line in "${selected_lines[@]}"; do
                        pkgname="${line#* }"
                        pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"
                        sed -i "\|^$(printf '%s' "$pkgname")\$|d" "$favorites_file"
                    done
                    echo "packages removed from favorites"
                    read -n 1 -s -r -p "press any key to return"
                    ;;
                6)
                    clear
                    official_pkgs=()
                    aur_pkgs=()
                    for line in "${selected_lines[@]}"; do
                        pkgtype="${line%% *}"
                        pkgname="${line#* }"
                        pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"
                        if [[ "$pkgtype" == "[official]" ]]; then
                            official_pkgs+=("$pkgname")
                        elif [[ "$pkgtype" == "[aur]" ]]; then
                            aur_pkgs+=("$pkgname")
                        fi
                    done
                    echo "[bulk installing selected packages]"
                    if [[ ${#official_pkgs[@]} -gt 0 ]]; then
                        sudo pacman -S "${official_pkgs[@]}"
                    fi
                    if [[ ${#aur_pkgs[@]} -gt 0 && -n "$aur_helper" ]]; then
                        "$aur_helper" -S "${aur_pkgs[@]}"
                    fi
                    read -n 1 -s -r -p "press any key to return"
                    ;;
                7)
                    clear
    	            echo "refreshing package lists"
    		    download_aur_list
    		    pacman -Slq > "$repopackages"
    		    sort -o "$aurpackages" "$aurpackages"
    	            sort -o "$repopackages" "$repopackages"
    	            generate_fzf_input "$mode"
   		    echo "lists refreshed, press any key to return"
    		    read -n 1 -s -r
    		    clear
    	  	    ;;
                *)
                    clear
                    echo "invalid option"
                    read -n 1 -s -r -p "press any key to return"
                    ;;
            esac
        done
    else
        line="${selected_lines[0]}"
        pkgtype="${line%% *}"
        pkgname="${line#* }"
        pkgname="${pkgname#"${pkgname%%[![:space:]]*}"}"

        while true; do
            echo "choose an option:"
            echo "1) preview package info"
            echo "2) refresh package list"
            echo "3) install package"
            echo "4) back to package list"
            if grep -Fxq "$pkgname" "$favorites_file"; then
                echo "6) remove from favorites"
            else
                echo "5) add to favorites"
            fi
            read -rp ">> " choice

            case "$choice" in
                1)
                    clear
                    preview_package "$pkgtype" "$pkgname"
                    read -n 1 -s -r -p "press any key to return"
                    clear
                    ;;
                2)
                    clear
    	            echo "refreshing package lists"
    		    download_aur_list
    		    pacman -Slq > "$repopackages"
    		    sort -o "$aurpackages" "$aurpackages"
    		    sort -o "$repopackages" "$repopackages"
    		    generate_fzf_input "$mode"
                    echo "lists refreshed, press any key to return"
		    read -n 1 -s -r
		    clear
		    ;;
                3)
                    clear
                    install_package "$pkgtype" "$pkgname"
                    read -n 1 -s -r -p "press any key to return"
                    clear
                    ;;
                4)
                    clear
                    break
                    ;;
                5)
                    clear
                    echo "$pkgname" >> "$favorites_file"
                    sort -u -o "$favorites_file" "$favorites_file"
                    echo "$pkgname added to favorites"
                    read -n 1 -s -r -p "press any key to return"
                    clear
                    ;;
                6)
                    clear
                    sed -i "\|^$(printf '%s' "$pkgname")\$|d" "$favorites_file"
                    echo "$pkgname removed from favorites"
                    read -n 1 -s -r -p "press any key to return"
                    clear
                    ;;
                *)
                    clear
                    echo "invalid option"
                    read -n 1 -s -r -p "press any key to return"
                    ;;
            esac
        done
    fi
done
